import java.util.regex.Matcher

plugins {
    id 'application'
    id "dev.equo.p2deps" version "1.7.8"
}

group = 'com.github.TarCV'
application {
    mainClass = "com.android.uiautomator.UiAutomatorViewer"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
    google()
}

p2deps {
    into 'implementation', {
        // see https://download.eclipse.org/eclipse/downloads/index.html for versions
        p2repo 'https://download.eclipse.org/eclipse/updates/4.34/'
        install 'org.eclipse.swt'
        install 'org.eclipse.jface'
    }
}
dependencies {
    implementation group: 'com.android.tools.ddms', name: 'ddmlib', version: '31.13.0'
}

tasks.named('run') {
    jvmArguments = providers.systemProperty('os.name')
            .map {
                def fixed = it.toLowerCase(Locale.ENGLISH)
                fixed.contains('darwin') || fixed.contains('mac')
            }
            .map {
                if (it) {
                    ['-XstartOnFirstThread']
                } else {
                    []
                }
            }
}

def startScripts = tasks.named('startScripts')
def macOptFix = '; if "$darwin" ; then DEFAULT_JVM_OPTS="$DEFAULT_JVM_OPTS -XstartOnFirstThread"; fi'
def checkStartScripts = tasks.register('checkStartScripts') {
    dependsOn startScripts
    doLast {
        def nixScriptText = startScripts.get().outputs.files
                .singleFile
                .listFiles()
                .find { File f ->
                    f.isFile() && !f.name.contains('.')
                }
                .getText('UTF-8')
        try {
            assert nixScriptText.contains(macOptFix)
        } catch (AssertionError e) {
            throw new AssertionError("Start scripts are not properly patched for Macs. Please try removing build/scripts directory.", e)
        }
    }
}
startScripts.configure {
    finalizedBy checkStartScripts

    final originalGenerator = unixStartScriptGenerator
    unixStartScriptGenerator = new ScriptGenerator() {
        @Override
        void generateScript(JavaAppStartScriptGenerationDetails details, Writer destination) {
            def stringWriter = new StringWriter()
            originalGenerator.generateScript(details, stringWriter)
            def patchedScript = stringWriter.toString()
                    .replaceFirst(
                            '(DEFAULT_JVM_OPTS=.+)',
                            '$1' + Matcher.quoteReplacement(macOptFix)
                    )
            destination.write(patchedScript)
        }
    }
}